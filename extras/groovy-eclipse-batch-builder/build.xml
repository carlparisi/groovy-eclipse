<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2010 SpringSource, VMWare and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
    
    Contributors:
        Andrew Eisenberg - initial API and implementation
 -->

<!--
	To use this scrupt:
	  1) Make sure that you have an eclipse 4.2 installation available.
	  2) Clone Groovy-Eclipse from git and start up a workspace with all of these projects
	  3) Update build.properties to point to the appropriate locations
	  4) Comment/uncomment do-17-build, do-18-build, or  do-20-build (exactly one of these must be uncommented at once)
	  5) Update version1.7, version1.8, or version20 to the correct, new version number
	  6) run `ant extract-create-install` to build the groovy-eclipse-batch artifact and install it locally
	  7) OR run `ant extract-create-publish` to publish to codehaus and mirror it on maven central
	  
	  When running extract-create-publish, you must supply the following two properties:
	  		groovy.deploy.username : your codehaus username
	  		groovy.deploy.password : your codehaus password
-->
<project name="Build the groovy-eclipse-batch jar" basedir="." default="extract-create-publish">

	<import file="maven/build-maven.xml"/> 

	<!-- ================================= 
          target: extract-create-publish
          Do all the work: extract the original jars to the extract location and jar it up to a single jar
          also copy over the pom.
          Finally, deploy the artifact to the artifact repo
       ================================= -->
	<target name="extract-create-publish" depends="extract-create,publish"/>

	<!-- ================================= 
          target: extract-create
          Do all work except install and deployment to repo
       ================================= -->
	<target name="extract-create" depends="-init,-extract,-create.jar,-copy-pom,-mavenInit"/>

	
	<!--  ================================= 
          target: publish
          publish to the codehaus repository as well as install locally
         =================================  -->
	<target name="publish" depends="-init,extract-create-install,-forceUploadSettings,-deployDefault"
      description="Deploy jars to maven repository on codehaus.org.">
	</target>


	
	<!--  ================================= 
          target: extract-create-install
         installs into the local repo                     
         =================================  -->
	<target name="extract-create-install" depends="-init,extract-create">
		<mavenInstall version="${version}" prefix="${jar.prefix}"/>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -extract 
          extract the contents of all jars and copy them to the extract location
         - - - - - - - - - - - - - - - - - -->
	<target name="-extract" depends="-init">
		<mkdir dir="${jar.dest}"/>
		<delete dir="${extract.loc}" failonerror="no"/>
		<mkdir dir="${extract.loc}"/>
		<unzip dest="${extract.loc}">
			<fileset refid="orig.plugin.jars"/>
			<fileset refid="orig.groovy.jars"/>
		</unzip>

		<!-- Overwrite existing with classes from workspace bin folders-->
		<copy todir="${extract.loc}">
			<fileset refid="jdt.groovy.core.class.files"/>
			<fileset refid="jdt.core.class.files"/>
			<fileset refid="groovy.core.class.files"/>
			<fileset refid="groovy.trace.class.files"/>
			<fileset refid="ant.groovy.class.files"/>
		</copy>

		<!-- now unzip the jdt compiler adapter jar.  It is a jar within a jar -->
		<unzip dest="${extract.loc}" src="${git.repo.loc}/jdt-patch/e42/org.eclipse.jdt.core/jdtCompilerAdapter.jar" />

	</target>
	
	

	<!-- - - - - - - - - - - - - - - - - - 
          target: -create.jar        
          jar up all relevant files in the extract location               
         - - - - - - - - - - - - - - - - - -->
	<target name="-create.jar" depends="-init">
		<delete dir="${jar.dest}" failonerror="no"/>
		<mkdir dir="${jar.dest}"/>
		<jar destfile="${jar.dest}/${jar.name}" manifest="maven/MANIFEST.MF">
			<fileset dir="${extract.loc}">
				<include name="**/*.class"/>
				<include name="**/*.properties"/>
				<include name="**/*.props"/>
				<include name="**/*.rsc"/>
				<include name="**/dgminfo"/>
				<include name="**/*.profile"/>
			</fileset>
		</jar>
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: -init   
          create properties and filesets                   
         - - - - - - - - - - - - - - - - - -->
	<target name="-init" depends="-fail-if-no-version-specified,-init17,-init18,-init20">
		<property file="build.properties"/>
		<property name="jar.prefix" value="groovy-eclipse-batch"/>

		<property name="jar.name" value="${jar.prefix}-${version}.jar"/>
		<property name="pom.name" value="${jar.prefix}.pom"/>

		<fileset dir="${eclipse.install.plugins}" id="orig.plugin.jars">
			<include name="org.eclipse.osgi_*.jar" />
			<include name="org.eclipse.core.runtime_*.jar" />
			<include name="org.eclipse.core.resources_*.jar" />
			<include name="org.eclipse.core.filesystem_*.jar" />
			<include name="org.eclipse.equinox.common_*.jar" />
			<include name="org.eclipse.core.jobs_*.jar" />
			<include name="org.eclipse.text_*.jar" />
			<include name="org.eclipse.jdt.core_*.jar" />
			<include name="org.eclipse.jdt.compiler.apt_*.jar" />
		</fileset>

		<fileset dir="${git.repo.loc}/base" id="orig.groovy.jars">

			<!-- includes all the groovy modules already inside greclipse, and the groovy sources -->
			<!-- FIXADE Do we need to include all modules or just the core?  -->
			<include name="${groovy.folder}/lib/groovy-*.jar"/>
			<include name="${groovy.folder}/lib/antlr-*.jar"/>
			<!-- Captures ASM and ASM tree-->
			<include name="${groovy.folder}/lib/asm-*.jar"/>

			<!-- Also include the non-locking classloader with sources -->
			<include name="org.eclipse.jdt.groovy.core/nlcl*.jar"/>
			
			<!-- -->
			<exclude name="${groovy.folder}/lib/groovy-all*.jar"/>
		</fileset>


		<fileset dir="${git.repo.loc}/base/org.eclipse.jdt.groovy.core/bin" id="jdt.groovy.core.class.files">
			<include name="**/*.*" />
		</fileset>
		<fileset dir="${git.repo.loc}/jdt-patch/e42/org.eclipse.jdt.core/bin" id="jdt.core.class.files">
			<include name="**/*.*" />
		</fileset>
		<!-- Ensure that this comes after the core groocy compiler files because the groovy-eclipse.jar must overwrite the groovy jar -->
		<fileset dir="${git.repo.loc}/base/${groovy.folder}/bin" id="groovy.core.class.files">
			<include name="**/*.*" />
		</fileset>
		<fileset dir="${git.repo.loc}/base/${groovy.folder}/bin-trace" id="groovy.trace.class.files">
			<include name="**/*.*" />
		</fileset>
		<fileset dir="${git.repo.loc}/ide/org.codehaus.groovy.eclipse.ant/bin" id="ant.groovy.class.files">
			<include name="**/*.*" />
		</fileset>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -init17
         - - - - - - - - - - - - - - - - - -->
    <target name="-init17" if="do-17-build">
       <property name="version" value="${version1.7}"/>
    	 <property name="groovy.folder" value="org.codehaus.groovy"/>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -init18
         - - - - - - - - - - - - - - - - - -->
    <target name="-init18" if="do-18-build">
       <property name="version" value="${version1.8}"/>
    	 <property name="groovy.folder" value="org.codehaus.groovy18"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: -init20
         - - - - - - - - - - - - - - - - - -->
    <target name="-init20" if="do-20-build">
       <property name="version" value="${version2.0}"/>
    	 <property name="groovy.folder" value="org.codehaus.groovy20"/>
    </target>
	
	<target name="-check-build-version">
		<property file="build.properties"/>
		<condition property="no-version-specified">
			<not>
			<or>
				<isset property="do-17-build"/>
				<isset property="do-18-build"/>
				<isset property="do-20-build"/>
			</or>
			</not>
		</condition>
	</target>

	<target name="-fail-if-no-version-specified" depends="-check-build-version" if="no-version-specified">
		<fail message="You must set exactly one of do-17-build, do-18-build, or do-20-build to specify a groovy version to build"/>
	</target>
	
	

	
	<!-- - - - - - - - - - - - - - - - - - 
          target: -copy-pom    
          copy the pom to the jar destination and ensure that the proper version is inserted                  
         - - - - - - - - - - - - - - - - - -->
	<target name="-copy-pom" depends="-init">
		<copy file="maven/pom.xml" tofile="${jar.dest}/${pom.name}"/>
		<replace file="${jar.dest}/${pom.name}" token="REPLACE_WITH_VERSION" value="${version}">
		</replace>
	</target>

	<!-- does the deploy and updates the username and pass -->
	<target name="-deployDefault" depends="-forceUploadSettings,-init,-mavenDeployInit">
		<mavenDeploy version="${version}" prefix="${jar.prefix}" settings="${jar.dest}/settings.xml"/>
	</target>

	<!-- updates username and pass to the specified properties -->
	<target name="-forceUploadSettings" depends="-init,-mavenDeployInit">
		<copy tofile="${jar.dest}/settings.xml">
			<fileset file="maven/settings.xml"/>
			<filterset>
				<filter token="groovy.deploy.username" value="${groovy.deploy.username}"/>
				<filter token="groovy.deploy.password" value="${groovy.deploy.password}"/>
			</filterset>
		</copy>
	</target>
</project>